version: "3.8"

services:
  postgres:
    image: postgres:11
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres1:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - micro-network      

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: on-failure
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
      - "5051:443"
    networks:
      - micro-network

  auth:
    image: sadi001/hotel-booking-auth:main
    container_name: auth_service
    restart: on-failure
    ports:
      - "5001:5001"
    environment:
      - PORT=${PORT_AUTH}
      - SERVICE_NAME=Auth-Service
      - DATABASE_URL=${DATABASE_URL_AUTH}
    depends_on:
      - postgres
    networks:
      - micro-network 
      
  user:
    image: sadi001/hotel-booking-user:main  # Use the Docker Hub image
    container_name: user_service
    restart: on-failure
    ports:
      - "5002:5002"
    environment:
      - PORT=${PORT_USER}
      - SERVICE_NAME=User-Service
      - DATABASE_URL=${DATABASE_URL_USER}
    depends_on:
      - postgres
    networks:
      - micro-network       

  hotel:
    image: sadi001/hotel-booking-hotel:main  # Use the Docker Hub image
    container_name: hotel_service
    restart: on-failure
    ports:
      - "5004:5004"
    environment:
      - PORT=${PORT_HOTEL}
      - SERVICE_NAME=Hotel-Service
      - DATABASE_URL=${DATABASE_URL_HOTEL}
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - micro-network 

  room:
    image: sadi001/hotel-booking-room:main  # Use the Docker Hub image
    container_name: room_service
    restart: on-failure
    ports:
      - "5005:5005"
    environment:
      - PORT=${PORT_ROOM}
      - SERVICE_NAME=Room-Service
      - DATABASE_URL=${DATABASE_URL_ROOM}
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - micro-network 

  booking-management:
    image: sadi001/hotel-booking-booking-management:main 
    container_name: booking-management_service
    restart: on-failure
    ports:
      - "5006:5006"
    environment:
      - PORT=${PORT_BOOKING}
      - SERVICE_NAME=Booking-management-Service
      - DATABASE_URL=${DATABASE_URL_BOOKING}
    depends_on:
      - postgres
      - rabbitmq
      - redis-stack
    networks:
      - micro-network 
       
  email:
    image: sadi001/hotel-booking-email:main  # Use the Docker Hub image
    container_name: email_service
    restart: on-failure
    ports:
      - "5003:5003"
    environment:
      - PORT=${PORT_EMAIL}
      - SERVICE_NAME=Email-Service
      - DATABASE_URL=${DATABASE_URL_EMAIL}
    depends_on:
      - postgres
      - mailhog
    networks:
      - micro-network        
 
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    volumes:
      - ./api-gateway:/api-gateway
    networks:
      - micro-network   

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog2
    ports:
      - "1025:1025"
      - "8025:8025"
    volumes:
      - mailhog:/var/lib/mailhog
    networks:
      - micro-network   
  
  redis-stack:
    image: redis/redis-stack:latest
    ports:
      - "6379:6379"
      - "8002:8001"
    volumes:
      - redis-stack:/var/lib/redis-stack
    environment:
      - REDIS_ARGS=--save 900 1
    networks:
      - micro-network

  rabbitmq:
    image: rabbitmq:3.8-management
    ports:
      - "5672:5672" # RabbitMQ main port
      - "15672:15672" # RabbitMQ management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - micro-network

  kong-migration:
    build:
      context: ./config
      dockerfile: Dockerfile
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
    depends_on:
      - postgres
    networks:
      - micro-network

  kong:
    build:
      context: ./config
      dockerfile: Dockerfile
    container_name: kong
    restart: on-failure
    networks:
      - micro-network
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_ADMIN_LISTEN: 0.0.0.0:8001 
      KONG_PLUGINSERVER_NAMES: js
      KONG_PLUGINSERVER_JS_SOCKET: /usr/local/kong/js_pluginserver.sock
      KONG_PLUGINSERVER_JS_START_CMD: /usr/local/bin/kong-js-pluginserver -v --plugins-directory /usr/local/kong/js-plugins
      KONG_PLUGINSERVER_JS_QUERY_CMD: /usr/local/bin/kong-js-pluginserver --plugins-directory /usr/local/kong/js-plugins --dump-all-plugins
      KONG_PLUGINS: bundled,oidc
    depends_on:
      - postgres
      - kong-migration
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 100
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"

  kong-prepare:
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://postgres:postgres@postgres:5432/konga"
    depends_on:
      - postgres
      - kong
    networks:
      - micro-network

  konga:
    image: pantsel/konga:latest
    restart: always
    networks:
      - micro-network
    environment:
      DB_ADAPTER: "postgres"
      DB_HOST: "postgres"
      DB_USER: ${KONGA_DB_USER}
      DB_PASSWORD: ${KONGA_PG_PASSWORD}
      DB_DATABASE: ${KONGA_DB_DATABASE}
      KONGA_HOOK_TIMEOUT: 120000
    depends_on:
      - postgres
      - kong
    ports:
      - "1337:1337"

  keycloak:
    image: bitnami/keycloak:latest
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: ${KEY_DB_USER}
      DB_PASSWORD: ${KEY_DB_PASSWORD}
      KEYCLOAK_ADMIN_USER: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - 8081:8080
    depends_on:
      - postgres
    networks:
      - micro-network 

networks:
  micro-network:
    driver: bridge

volumes:
  postgres1:
  mailhog:
  redis-stack:
  rabbitmq_data:
  kong_data: {}
